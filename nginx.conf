events {}

http {
  # корректные MIME-типы для HLS

  # --- апстримы ---
  upstream node_a { server node-a:8080; }
  upstream node_b { server node-b:8080; }
  upstream node_c { server node-c:8080; }
  upstream mediamtx { server mediamtx:8888; }   # <-- добавили HLS

  # для WebSocket Upgrade
  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  server {
    listen 80;

    # health
    location = / {
      add_header Content-Type text/plain;
      return 200 'OK';
    }

    # =========================
    #   HLS (через gateway)
    # =========================
    # теперь плейлисты и сегменты доступны по /hls/...
    location /hls/ {
      proxy_pass http://mediamtx/;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header Connection "";
      proxy_buffering off;  # лучше не буферизовать сегменты в деве
      add_header Access-Control-Allow-Origin * always;
      add_header Access-Control-Expose-Headers * always;
      add_header Cache-Control "no-store";
    }


    # =========================
    #   WebSocket (STOMP/SockJS)
    # =========================
    location ~ ^/node-a/ws(/.*)?$ {
      proxy_pass http://node_a/ws$1;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header Origin $http_origin;
      proxy_buffering off;
      proxy_read_timeout 1h;
    }
    location ~ ^/node-b/ws(/.*)?$ {
      proxy_pass http://node_b/ws$1;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header Origin $http_origin;
      proxy_buffering off;
      proxy_read_timeout 1h;
    }
    location ~ ^/node-c/ws(/.*)?$ {
      proxy_pass http://node_c/ws$1;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header Origin $http_origin;
      proxy_buffering off;
      proxy_read_timeout 1h;
    }

    # (опционально) универсальный роутер /api/node-*/ws
    location ~ ^/api/(node-a|node-b|node-c)/ws(/.*)?$ {
      set $target $1;
      set $rest   $2;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_read_timeout 1h;
      if ($target = node-a) { proxy_pass http://node_a/ws$rest; }
      if ($target = node-b) { proxy_pass http://node_b/ws$rest; }
      if ($target = node-c) { proxy_pass http://node_c/ws$rest; }
    }

    # =========================
    #   HTTP + SSE прокси
    # =========================
    location /node-a/ {
      proxy_pass http://node_a/;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_buffering off;   # важно для SSE
      proxy_read_timeout 1h;
      proxy_send_timeout 1h;
    }
    location /node-b/ {
      proxy_pass http://node_b/;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_read_timeout 1h;
      proxy_send_timeout 1h;
    }
    location /node-c/ {
      proxy_pass http://node_c/;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_read_timeout 1h;
      proxy_send_timeout 1h;
    }

    # статика со снимками камер
    location /snapshots/ {
      root /usr/share/nginx/html;  # => /usr/share/nginx/html/snapshots/...
      autoindex on;
      add_header Access-Control-Allow-Origin * always;
      add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
      expires 0;
    }

    # (опционально) универсальный роутер: /api/node-a/... -> node-a:8080/...
    location ~ ^/api/(node-a|node-b|node-c)/(.*)$ {
      set $target $1;
      set $rest   /$2;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_read_timeout 1h;
      proxy_send_timeout 1h;
      if ($target = node-a) { proxy_pass http://node_a$rest; }
      if ($target = node-b) { proxy_pass http://node_b$rest; }
      if ($target = node-c) { proxy_pass http://node_c$rest; }
    }
  }
}